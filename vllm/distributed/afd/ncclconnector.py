from vllm.sequence import IntermediateTensors
from vllm.distributed.afd.AFDconnector import AFDConnectorBase


class ncclconnector(AFDConnectorBase):
    def __init__(self, process_group) -> None:
        super().__init__(process_group)
        self.process_group = process_group

    def send_attn_output(self, intermediate_tensors: IntermediateTensors):
        """
        This method will be called by the ATTN side.


        * To send the intermediate tensors generated by ATTN instances to FFN.
        """

        self.process_group.send_tensor_dict(
            intermediate_tensors.tensors,
            #dst= 0
            all_gather_group=None,  # don't slice and send, just send for now
        )

    def recv_attn_output(self) -> IntermediateTensors:
        """
        This method will be called by the FFN side.


        * To receive the intermediate tensors from ATTN.
        * And (Maybe) dispatch them from the receiver to other GPUs.
        """
        intermediate_tensors = self.process_group.recv_tensor_dict(
            #src=0,
            all_gather_group=None,
        )
        return IntermediateTensors(intermediate_tensors)

    # -------------------------------------------------------------------------
    #                                attn <- ffn
    # -------------------------------------------------------------------------
    def send_ffn_output(self, intermediate_tensors: IntermediateTensors):
        """
        This method will be called by the FFN side.


        * To send the intermediate tensors generated by FFN instances back to
            the sender (this should be the same GPU as it comes from)
        """
        self.process_group.send_tensor_dict(
            intermediate_tensors.tensors,
            #dst=1,
        )

    def recv_ffn_output(self) -> IntermediateTensors:
        """
        This method will be called by the ATTN side.


        * To receive the MOE output intermediate tensors.
        * And (Maybe) dispatch them from the receiver to other GPUs.
            (this should be the same GPU as it comes from)
        """
        intermediate_tensors = self.process_group.recv_tensor_dict(
            #src=1,
            all_gather_group=None,
        )
        return intermediate_tensors
